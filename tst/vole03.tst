# Vole, chapter 3
#
# DO NOT EDIT THIS FILE - EDIT EXAMPLES IN THE SOURCE INSTEAD!
#
# This file has been generated by AutoDoc. It contains examples extracted from
# the package documentation. Each example is preceded by a comment which gives
# the name of a GAPDoc XML file and a line range from which the example were
# taken. Note that the XML file in turn may have been generated by AutoDoc
# from some other input.
#
gap> START_TEST("vole03.tst");

# doc/_Chapter_tut.xml:16-21
gap> M12 := MathieuGroup(12);;
gap> S := [ 1, 2, 4, 5 ];;
gap> G := Group([(1,8,7,2,3,10,9,4)(5,6,11,12), (3,11)(4,12,6,8,10)]);;
gap> H := Group([(1,2,3,4,9,10,5,6,11,8)(7,12), (1,5,9)(6,12)(8,10)]);;

# doc/_Chapter_tut.xml:31-37
gap> answer := Group([(1,2)(3,10)(4,5)(6,7)(8,9)(11,12),
>                     (2,4)(3,7)(8,12)(9,11)]);
Group([ (1,2)(3,10)(4,5)(6,7)(8,9)(11,12), (2,4)(3,7)(8,12)(9,11) ])
gap> StructureDescription(answer);
"D8"

# doc/_Chapter_tut.xml:49-54
gap> Intersection(Stabiliser(M12, S, OnSets),
>                 Normaliser(G, H))
> = answer;
true

# doc/_Chapter_tut.xml:62-67
gap> M12andG := Intersection(M12, G);;
gap> stab := Stabiliser(M12andG, S, OnSets);;
gap> Normaliser(stab, H) = answer;
true

# doc/_Chapter_tut.xml:74-79
gap> M12andG := Intersection(M12, G);;
gap> norm := Normaliser(M12andG, H);;
gap> Stabiliser(norm, S, OnSets) = answer;
true

# doc/_Chapter_tut.xml:89-95
gap> LoadPackage("vole", false);;
gap> stab := Vole.Stabiliser(M12, S, OnSets);;
gap> norm := Vole.Normaliser(G, H);;
gap> answer = Vole.Intersection(stab, norm);
true

# doc/_Chapter_tut.xml:154-161
gap> VoleFind.Group(Constraint.InGroup(M12),
>                   Constraint.Stabilize(S, OnSets),
>                   Constraint.InGroup(G),
>                   Constraint.Normalize(H))
> = answer;
true

# doc/_Chapter_tut.xml:181-195
gap> VoleFind.Group(Constraint.InGroup(M12),
>                   Constraint.Stabilize(S, OnSets),
>                   Constraint.InGroup(G),
>                   GB_Con.NormaliserSimple(H))
> = answer;
true
gap> VoleFind.Group(Constraint.InGroup(M12),
>                   Constraint.Stabilize(S, OnSets),
>                   Constraint.InGroup(G),
>                   Constraint.Normalise(H),
>                   GB_Con.NormaliserSimple(H))
> = answer;
true

#
gap> STOP_TEST("vole03.tst", 1);
